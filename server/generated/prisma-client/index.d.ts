// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  booking: (where?: BookingWhereInput) => Promise<boolean>;
  campsite: (where?: CampsiteWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  booking: (where: BookingWhereUniqueInput) => BookingNullablePromise;
  bookings: (args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Booking>;
  bookingsConnection: (args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BookingConnectionPromise;
  campsite: (where: CampsiteWhereUniqueInput) => CampsiteNullablePromise;
  campsites: (args?: {
    where?: CampsiteWhereInput;
    orderBy?: CampsiteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Campsite>;
  campsitesConnection: (args?: {
    where?: CampsiteWhereInput;
    orderBy?: CampsiteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CampsiteConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBooking: (data: BookingCreateInput) => BookingPromise;
  updateBooking: (args: {
    data: BookingUpdateInput;
    where: BookingWhereUniqueInput;
  }) => BookingPromise;
  updateManyBookings: (args: {
    data: BookingUpdateManyMutationInput;
    where?: BookingWhereInput;
  }) => BatchPayloadPromise;
  upsertBooking: (args: {
    where: BookingWhereUniqueInput;
    create: BookingCreateInput;
    update: BookingUpdateInput;
  }) => BookingPromise;
  deleteBooking: (where: BookingWhereUniqueInput) => BookingPromise;
  deleteManyBookings: (where?: BookingWhereInput) => BatchPayloadPromise;
  createCampsite: (data: CampsiteCreateInput) => CampsitePromise;
  updateCampsite: (args: {
    data: CampsiteUpdateInput;
    where: CampsiteWhereUniqueInput;
  }) => CampsitePromise;
  updateManyCampsites: (args: {
    data: CampsiteUpdateManyMutationInput;
    where?: CampsiteWhereInput;
  }) => BatchPayloadPromise;
  upsertCampsite: (args: {
    where: CampsiteWhereUniqueInput;
    create: CampsiteCreateInput;
    update: CampsiteUpdateInput;
  }) => CampsitePromise;
  deleteCampsite: (where: CampsiteWhereUniqueInput) => CampsitePromise;
  deleteManyCampsites: (where?: CampsiteWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  booking: (
    where?: BookingSubscriptionWhereInput
  ) => BookingSubscriptionPayloadSubscription;
  campsite: (
    where?: CampsiteSubscriptionWhereInput
  ) => CampsiteSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BookingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "spots_ASC"
  | "spots_DESC"
  | "date_ASC"
  | "date_DESC";

export type CampsiteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "campname_ASC"
  | "campname_DESC"
  | "price_ASC"
  | "price_DESC"
  | "description_ASC"
  | "description_DESC"
  | "spots_ASC"
  | "spots_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "emergency_ASC"
  | "emergency_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BookingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BookingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  spots?: Maybe<Int>;
  spots_not?: Maybe<Int>;
  spots_in?: Maybe<Int[] | Int>;
  spots_not_in?: Maybe<Int[] | Int>;
  spots_lt?: Maybe<Int>;
  spots_lte?: Maybe<Int>;
  spots_gt?: Maybe<Int>;
  spots_gte?: Maybe<Int>;
  bookedSite?: Maybe<CampsiteWhereInput>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BookingWhereInput[] | BookingWhereInput>;
  OR?: Maybe<BookingWhereInput[] | BookingWhereInput>;
  NOT?: Maybe<BookingWhereInput[] | BookingWhereInput>;
}

export interface CampsiteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  campname?: Maybe<String>;
  campname_not?: Maybe<String>;
  campname_in?: Maybe<String[] | String>;
  campname_not_in?: Maybe<String[] | String>;
  campname_lt?: Maybe<String>;
  campname_lte?: Maybe<String>;
  campname_gt?: Maybe<String>;
  campname_gte?: Maybe<String>;
  campname_contains?: Maybe<String>;
  campname_not_contains?: Maybe<String>;
  campname_starts_with?: Maybe<String>;
  campname_not_starts_with?: Maybe<String>;
  campname_ends_with?: Maybe<String>;
  campname_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  spots?: Maybe<Int>;
  spots_not?: Maybe<Int>;
  spots_in?: Maybe<Int[] | Int>;
  spots_not_in?: Maybe<Int[] | Int>;
  spots_lt?: Maybe<Int>;
  spots_lte?: Maybe<Int>;
  spots_gt?: Maybe<Int>;
  spots_gte?: Maybe<Int>;
  booked_every?: Maybe<BookingWhereInput>;
  booked_some?: Maybe<BookingWhereInput>;
  booked_none?: Maybe<BookingWhereInput>;
  AND?: Maybe<CampsiteWhereInput[] | CampsiteWhereInput>;
  OR?: Maybe<CampsiteWhereInput[] | CampsiteWhereInput>;
  NOT?: Maybe<CampsiteWhereInput[] | CampsiteWhereInput>;
}

export type CampsiteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<Int>;
  phone_not?: Maybe<Int>;
  phone_in?: Maybe<Int[] | Int>;
  phone_not_in?: Maybe<Int[] | Int>;
  phone_lt?: Maybe<Int>;
  phone_lte?: Maybe<Int>;
  phone_gt?: Maybe<Int>;
  phone_gte?: Maybe<Int>;
  emergency?: Maybe<Int>;
  emergency_not?: Maybe<Int>;
  emergency_in?: Maybe<Int[] | Int>;
  emergency_not_in?: Maybe<Int[] | Int>;
  emergency_lt?: Maybe<Int>;
  emergency_lte?: Maybe<Int>;
  emergency_gt?: Maybe<Int>;
  emergency_gte?: Maybe<Int>;
  booked_every?: Maybe<BookingWhereInput>;
  booked_some?: Maybe<BookingWhereInput>;
  booked_none?: Maybe<BookingWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface BookingCreateInput {
  id?: Maybe<ID_Input>;
  spots?: Maybe<Int>;
  bookedSite: CampsiteCreateOneWithoutBookedInput;
  date: DateTimeInput;
}

export interface CampsiteCreateOneWithoutBookedInput {
  create?: Maybe<CampsiteCreateWithoutBookedInput>;
  connect?: Maybe<CampsiteWhereUniqueInput>;
}

export interface CampsiteCreateWithoutBookedInput {
  id?: Maybe<ID_Input>;
  campname: String;
  price: Int;
  description?: Maybe<String>;
  facilities?: Maybe<CampsiteCreatefacilitiesInput>;
  details?: Maybe<CampsiteCreatedetailsInput>;
  reviews?: Maybe<CampsiteCreatereviewsInput>;
  location?: Maybe<CampsiteCreatelocationInput>;
  spots?: Maybe<Int>;
}

export interface CampsiteCreatefacilitiesInput {
  set?: Maybe<String[] | String>;
}

export interface CampsiteCreatedetailsInput {
  set?: Maybe<String[] | String>;
}

export interface CampsiteCreatereviewsInput {
  set?: Maybe<String[] | String>;
}

export interface CampsiteCreatelocationInput {
  set?: Maybe<Float[] | Float>;
}

export interface BookingUpdateInput {
  spots?: Maybe<Int>;
  bookedSite?: Maybe<CampsiteUpdateOneRequiredWithoutBookedInput>;
  date?: Maybe<DateTimeInput>;
}

export interface CampsiteUpdateOneRequiredWithoutBookedInput {
  create?: Maybe<CampsiteCreateWithoutBookedInput>;
  update?: Maybe<CampsiteUpdateWithoutBookedDataInput>;
  upsert?: Maybe<CampsiteUpsertWithoutBookedInput>;
  connect?: Maybe<CampsiteWhereUniqueInput>;
}

export interface CampsiteUpdateWithoutBookedDataInput {
  campname?: Maybe<String>;
  price?: Maybe<Int>;
  description?: Maybe<String>;
  facilities?: Maybe<CampsiteUpdatefacilitiesInput>;
  details?: Maybe<CampsiteUpdatedetailsInput>;
  reviews?: Maybe<CampsiteUpdatereviewsInput>;
  location?: Maybe<CampsiteUpdatelocationInput>;
  spots?: Maybe<Int>;
}

export interface CampsiteUpdatefacilitiesInput {
  set?: Maybe<String[] | String>;
}

export interface CampsiteUpdatedetailsInput {
  set?: Maybe<String[] | String>;
}

export interface CampsiteUpdatereviewsInput {
  set?: Maybe<String[] | String>;
}

export interface CampsiteUpdatelocationInput {
  set?: Maybe<Float[] | Float>;
}

export interface CampsiteUpsertWithoutBookedInput {
  update: CampsiteUpdateWithoutBookedDataInput;
  create: CampsiteCreateWithoutBookedInput;
}

export interface BookingUpdateManyMutationInput {
  spots?: Maybe<Int>;
  date?: Maybe<DateTimeInput>;
}

export interface CampsiteCreateInput {
  id?: Maybe<ID_Input>;
  campname: String;
  price: Int;
  description?: Maybe<String>;
  facilities?: Maybe<CampsiteCreatefacilitiesInput>;
  details?: Maybe<CampsiteCreatedetailsInput>;
  reviews?: Maybe<CampsiteCreatereviewsInput>;
  location?: Maybe<CampsiteCreatelocationInput>;
  spots?: Maybe<Int>;
  booked?: Maybe<BookingCreateManyWithoutBookedSiteInput>;
}

export interface BookingCreateManyWithoutBookedSiteInput {
  create?: Maybe<
    BookingCreateWithoutBookedSiteInput[] | BookingCreateWithoutBookedSiteInput
  >;
  connect?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
}

export interface BookingCreateWithoutBookedSiteInput {
  id?: Maybe<ID_Input>;
  spots?: Maybe<Int>;
  date: DateTimeInput;
}

export interface CampsiteUpdateInput {
  campname?: Maybe<String>;
  price?: Maybe<Int>;
  description?: Maybe<String>;
  facilities?: Maybe<CampsiteUpdatefacilitiesInput>;
  details?: Maybe<CampsiteUpdatedetailsInput>;
  reviews?: Maybe<CampsiteUpdatereviewsInput>;
  location?: Maybe<CampsiteUpdatelocationInput>;
  spots?: Maybe<Int>;
  booked?: Maybe<BookingUpdateManyWithoutBookedSiteInput>;
}

export interface BookingUpdateManyWithoutBookedSiteInput {
  create?: Maybe<
    BookingCreateWithoutBookedSiteInput[] | BookingCreateWithoutBookedSiteInput
  >;
  delete?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  connect?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  set?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  disconnect?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  update?: Maybe<
    | BookingUpdateWithWhereUniqueWithoutBookedSiteInput[]
    | BookingUpdateWithWhereUniqueWithoutBookedSiteInput
  >;
  upsert?: Maybe<
    | BookingUpsertWithWhereUniqueWithoutBookedSiteInput[]
    | BookingUpsertWithWhereUniqueWithoutBookedSiteInput
  >;
  deleteMany?: Maybe<BookingScalarWhereInput[] | BookingScalarWhereInput>;
  updateMany?: Maybe<
    | BookingUpdateManyWithWhereNestedInput[]
    | BookingUpdateManyWithWhereNestedInput
  >;
}

export interface BookingUpdateWithWhereUniqueWithoutBookedSiteInput {
  where: BookingWhereUniqueInput;
  data: BookingUpdateWithoutBookedSiteDataInput;
}

export interface BookingUpdateWithoutBookedSiteDataInput {
  spots?: Maybe<Int>;
  date?: Maybe<DateTimeInput>;
}

export interface BookingUpsertWithWhereUniqueWithoutBookedSiteInput {
  where: BookingWhereUniqueInput;
  update: BookingUpdateWithoutBookedSiteDataInput;
  create: BookingCreateWithoutBookedSiteInput;
}

export interface BookingScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  spots?: Maybe<Int>;
  spots_not?: Maybe<Int>;
  spots_in?: Maybe<Int[] | Int>;
  spots_not_in?: Maybe<Int[] | Int>;
  spots_lt?: Maybe<Int>;
  spots_lte?: Maybe<Int>;
  spots_gt?: Maybe<Int>;
  spots_gte?: Maybe<Int>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BookingScalarWhereInput[] | BookingScalarWhereInput>;
  OR?: Maybe<BookingScalarWhereInput[] | BookingScalarWhereInput>;
  NOT?: Maybe<BookingScalarWhereInput[] | BookingScalarWhereInput>;
}

export interface BookingUpdateManyWithWhereNestedInput {
  where: BookingScalarWhereInput;
  data: BookingUpdateManyDataInput;
}

export interface BookingUpdateManyDataInput {
  spots?: Maybe<Int>;
  date?: Maybe<DateTimeInput>;
}

export interface CampsiteUpdateManyMutationInput {
  campname?: Maybe<String>;
  price?: Maybe<Int>;
  description?: Maybe<String>;
  facilities?: Maybe<CampsiteUpdatefacilitiesInput>;
  details?: Maybe<CampsiteUpdatedetailsInput>;
  reviews?: Maybe<CampsiteUpdatereviewsInput>;
  location?: Maybe<CampsiteUpdatelocationInput>;
  spots?: Maybe<Int>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  password: String;
  email: String;
  phone?: Maybe<Int>;
  emergency?: Maybe<Int>;
  booked?: Maybe<BookingCreateManyInput>;
  favourite?: Maybe<UserCreatefavouriteInput>;
}

export interface BookingCreateManyInput {
  create?: Maybe<BookingCreateInput[] | BookingCreateInput>;
  connect?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
}

export interface UserCreatefavouriteInput {
  set?: Maybe<String[] | String>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<Int>;
  emergency?: Maybe<Int>;
  booked?: Maybe<BookingUpdateManyInput>;
  favourite?: Maybe<UserUpdatefavouriteInput>;
}

export interface BookingUpdateManyInput {
  create?: Maybe<BookingCreateInput[] | BookingCreateInput>;
  update?: Maybe<
    | BookingUpdateWithWhereUniqueNestedInput[]
    | BookingUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | BookingUpsertWithWhereUniqueNestedInput[]
    | BookingUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  connect?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  set?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  disconnect?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  deleteMany?: Maybe<BookingScalarWhereInput[] | BookingScalarWhereInput>;
  updateMany?: Maybe<
    | BookingUpdateManyWithWhereNestedInput[]
    | BookingUpdateManyWithWhereNestedInput
  >;
}

export interface BookingUpdateWithWhereUniqueNestedInput {
  where: BookingWhereUniqueInput;
  data: BookingUpdateDataInput;
}

export interface BookingUpdateDataInput {
  spots?: Maybe<Int>;
  bookedSite?: Maybe<CampsiteUpdateOneRequiredWithoutBookedInput>;
  date?: Maybe<DateTimeInput>;
}

export interface BookingUpsertWithWhereUniqueNestedInput {
  where: BookingWhereUniqueInput;
  update: BookingUpdateDataInput;
  create: BookingCreateInput;
}

export interface UserUpdatefavouriteInput {
  set?: Maybe<String[] | String>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<Int>;
  emergency?: Maybe<Int>;
  favourite?: Maybe<UserUpdatefavouriteInput>;
}

export interface BookingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BookingWhereInput>;
  AND?: Maybe<BookingSubscriptionWhereInput[] | BookingSubscriptionWhereInput>;
  OR?: Maybe<BookingSubscriptionWhereInput[] | BookingSubscriptionWhereInput>;
  NOT?: Maybe<BookingSubscriptionWhereInput[] | BookingSubscriptionWhereInput>;
}

export interface CampsiteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CampsiteWhereInput>;
  AND?: Maybe<
    CampsiteSubscriptionWhereInput[] | CampsiteSubscriptionWhereInput
  >;
  OR?: Maybe<CampsiteSubscriptionWhereInput[] | CampsiteSubscriptionWhereInput>;
  NOT?: Maybe<
    CampsiteSubscriptionWhereInput[] | CampsiteSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Booking {
  id: ID_Output;
  spots?: Int;
  date: DateTimeOutput;
}

export interface BookingPromise extends Promise<Booking>, Fragmentable {
  id: () => Promise<ID_Output>;
  spots: () => Promise<Int>;
  bookedSite: <T = CampsitePromise>() => T;
  date: () => Promise<DateTimeOutput>;
}

export interface BookingSubscription
  extends Promise<AsyncIterator<Booking>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  spots: () => Promise<AsyncIterator<Int>>;
  bookedSite: <T = CampsiteSubscription>() => T;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BookingNullablePromise
  extends Promise<Booking | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  spots: () => Promise<Int>;
  bookedSite: <T = CampsitePromise>() => T;
  date: () => Promise<DateTimeOutput>;
}

export interface Campsite {
  id: ID_Output;
  campname: String;
  price: Int;
  description?: String;
  facilities: String[];
  details: String[];
  reviews: String[];
  location: Float[];
  spots?: Int;
}

export interface CampsitePromise extends Promise<Campsite>, Fragmentable {
  id: () => Promise<ID_Output>;
  campname: () => Promise<String>;
  price: () => Promise<Int>;
  description: () => Promise<String>;
  facilities: () => Promise<String[]>;
  details: () => Promise<String[]>;
  reviews: () => Promise<String[]>;
  location: () => Promise<Float[]>;
  spots: () => Promise<Int>;
  booked: <T = FragmentableArray<Booking>>(args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CampsiteSubscription
  extends Promise<AsyncIterator<Campsite>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  campname: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  facilities: () => Promise<AsyncIterator<String[]>>;
  details: () => Promise<AsyncIterator<String[]>>;
  reviews: () => Promise<AsyncIterator<String[]>>;
  location: () => Promise<AsyncIterator<Float[]>>;
  spots: () => Promise<AsyncIterator<Int>>;
  booked: <T = Promise<AsyncIterator<BookingSubscription>>>(args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CampsiteNullablePromise
  extends Promise<Campsite | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  campname: () => Promise<String>;
  price: () => Promise<Int>;
  description: () => Promise<String>;
  facilities: () => Promise<String[]>;
  details: () => Promise<String[]>;
  reviews: () => Promise<String[]>;
  location: () => Promise<Float[]>;
  spots: () => Promise<Int>;
  booked: <T = FragmentableArray<Booking>>(args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BookingConnection {
  pageInfo: PageInfo;
  edges: BookingEdge[];
}

export interface BookingConnectionPromise
  extends Promise<BookingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookingEdge>>() => T;
  aggregate: <T = AggregateBookingPromise>() => T;
}

export interface BookingConnectionSubscription
  extends Promise<AsyncIterator<BookingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BookingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBookingSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BookingEdge {
  node: Booking;
  cursor: String;
}

export interface BookingEdgePromise extends Promise<BookingEdge>, Fragmentable {
  node: <T = BookingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BookingEdgeSubscription
  extends Promise<AsyncIterator<BookingEdge>>,
    Fragmentable {
  node: <T = BookingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBooking {
  count: Int;
}

export interface AggregateBookingPromise
  extends Promise<AggregateBooking>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBookingSubscription
  extends Promise<AsyncIterator<AggregateBooking>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CampsiteConnection {
  pageInfo: PageInfo;
  edges: CampsiteEdge[];
}

export interface CampsiteConnectionPromise
  extends Promise<CampsiteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CampsiteEdge>>() => T;
  aggregate: <T = AggregateCampsitePromise>() => T;
}

export interface CampsiteConnectionSubscription
  extends Promise<AsyncIterator<CampsiteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CampsiteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCampsiteSubscription>() => T;
}

export interface CampsiteEdge {
  node: Campsite;
  cursor: String;
}

export interface CampsiteEdgePromise
  extends Promise<CampsiteEdge>,
    Fragmentable {
  node: <T = CampsitePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CampsiteEdgeSubscription
  extends Promise<AsyncIterator<CampsiteEdge>>,
    Fragmentable {
  node: <T = CampsiteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCampsite {
  count: Int;
}

export interface AggregateCampsitePromise
  extends Promise<AggregateCampsite>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCampsiteSubscription
  extends Promise<AsyncIterator<AggregateCampsite>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
  password: String;
  email: String;
  phone?: Int;
  emergency?: Int;
  favourite: String[];
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<Int>;
  emergency: () => Promise<Int>;
  booked: <T = FragmentableArray<Booking>>(args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favourite: () => Promise<String[]>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  emergency: () => Promise<AsyncIterator<Int>>;
  booked: <T = Promise<AsyncIterator<BookingSubscription>>>(args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favourite: () => Promise<AsyncIterator<String[]>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<Int>;
  emergency: () => Promise<Int>;
  booked: <T = FragmentableArray<Booking>>(args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favourite: () => Promise<String[]>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BookingSubscriptionPayload {
  mutation: MutationType;
  node: Booking;
  updatedFields: String[];
  previousValues: BookingPreviousValues;
}

export interface BookingSubscriptionPayloadPromise
  extends Promise<BookingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookingPreviousValuesPromise>() => T;
}

export interface BookingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookingPreviousValuesSubscription>() => T;
}

export interface BookingPreviousValues {
  id: ID_Output;
  spots?: Int;
  date: DateTimeOutput;
}

export interface BookingPreviousValuesPromise
  extends Promise<BookingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  spots: () => Promise<Int>;
  date: () => Promise<DateTimeOutput>;
}

export interface BookingPreviousValuesSubscription
  extends Promise<AsyncIterator<BookingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  spots: () => Promise<AsyncIterator<Int>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CampsiteSubscriptionPayload {
  mutation: MutationType;
  node: Campsite;
  updatedFields: String[];
  previousValues: CampsitePreviousValues;
}

export interface CampsiteSubscriptionPayloadPromise
  extends Promise<CampsiteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CampsitePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CampsitePreviousValuesPromise>() => T;
}

export interface CampsiteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CampsiteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CampsiteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CampsitePreviousValuesSubscription>() => T;
}

export interface CampsitePreviousValues {
  id: ID_Output;
  campname: String;
  price: Int;
  description?: String;
  facilities: String[];
  details: String[];
  reviews: String[];
  location: Float[];
  spots?: Int;
}

export interface CampsitePreviousValuesPromise
  extends Promise<CampsitePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  campname: () => Promise<String>;
  price: () => Promise<Int>;
  description: () => Promise<String>;
  facilities: () => Promise<String[]>;
  details: () => Promise<String[]>;
  reviews: () => Promise<String[]>;
  location: () => Promise<Float[]>;
  spots: () => Promise<Int>;
}

export interface CampsitePreviousValuesSubscription
  extends Promise<AsyncIterator<CampsitePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  campname: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  facilities: () => Promise<AsyncIterator<String[]>>;
  details: () => Promise<AsyncIterator<String[]>>;
  reviews: () => Promise<AsyncIterator<String[]>>;
  location: () => Promise<AsyncIterator<Float[]>>;
  spots: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  password: String;
  email: String;
  phone?: Int;
  emergency?: Int;
  favourite: String[];
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<Int>;
  emergency: () => Promise<Int>;
  favourite: () => Promise<String[]>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  emergency: () => Promise<AsyncIterator<Int>>;
  favourite: () => Promise<AsyncIterator<String[]>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Campsite",
    embedded: false
  },
  {
    name: "Booking",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
