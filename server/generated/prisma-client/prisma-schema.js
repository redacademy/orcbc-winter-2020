module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBooking {
  count: Int!
}

type AggregateCampsite {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Booking {
  id: ID!
  spots: Int
  bookedSite: Campsite!
  date: DateTime!
}

type BookingConnection {
  pageInfo: PageInfo!
  edges: [BookingEdge]!
  aggregate: AggregateBooking!
}

input BookingCreateInput {
  id: ID
  spots: Int
  bookedSite: CampsiteCreateOneWithoutBookedInput!
  date: DateTime!
}

input BookingCreateManyInput {
  create: [BookingCreateInput!]
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateManyWithoutBookedSiteInput {
  create: [BookingCreateWithoutBookedSiteInput!]
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateWithoutBookedSiteInput {
  id: ID
  spots: Int
  date: DateTime!
}

type BookingEdge {
  node: Booking!
  cursor: String!
}

enum BookingOrderByInput {
  id_ASC
  id_DESC
  spots_ASC
  spots_DESC
  date_ASC
  date_DESC
}

type BookingPreviousValues {
  id: ID!
  spots: Int
  date: DateTime!
}

input BookingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  spots: Int
  spots_not: Int
  spots_in: [Int!]
  spots_not_in: [Int!]
  spots_lt: Int
  spots_lte: Int
  spots_gt: Int
  spots_gte: Int
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [BookingScalarWhereInput!]
  OR: [BookingScalarWhereInput!]
  NOT: [BookingScalarWhereInput!]
}

type BookingSubscriptionPayload {
  mutation: MutationType!
  node: Booking
  updatedFields: [String!]
  previousValues: BookingPreviousValues
}

input BookingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookingWhereInput
  AND: [BookingSubscriptionWhereInput!]
  OR: [BookingSubscriptionWhereInput!]
  NOT: [BookingSubscriptionWhereInput!]
}

input BookingUpdateDataInput {
  spots: Int
  bookedSite: CampsiteUpdateOneRequiredWithoutBookedInput
  date: DateTime
}

input BookingUpdateInput {
  spots: Int
  bookedSite: CampsiteUpdateOneRequiredWithoutBookedInput
  date: DateTime
}

input BookingUpdateManyDataInput {
  spots: Int
  date: DateTime
}

input BookingUpdateManyInput {
  create: [BookingCreateInput!]
  update: [BookingUpdateWithWhereUniqueNestedInput!]
  upsert: [BookingUpsertWithWhereUniqueNestedInput!]
  delete: [BookingWhereUniqueInput!]
  connect: [BookingWhereUniqueInput!]
  set: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  deleteMany: [BookingScalarWhereInput!]
  updateMany: [BookingUpdateManyWithWhereNestedInput!]
}

input BookingUpdateManyMutationInput {
  spots: Int
  date: DateTime
}

input BookingUpdateManyWithoutBookedSiteInput {
  create: [BookingCreateWithoutBookedSiteInput!]
  delete: [BookingWhereUniqueInput!]
  connect: [BookingWhereUniqueInput!]
  set: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutBookedSiteInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutBookedSiteInput!]
  deleteMany: [BookingScalarWhereInput!]
  updateMany: [BookingUpdateManyWithWhereNestedInput!]
}

input BookingUpdateManyWithWhereNestedInput {
  where: BookingScalarWhereInput!
  data: BookingUpdateManyDataInput!
}

input BookingUpdateWithoutBookedSiteDataInput {
  spots: Int
  date: DateTime
}

input BookingUpdateWithWhereUniqueNestedInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateDataInput!
}

input BookingUpdateWithWhereUniqueWithoutBookedSiteInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutBookedSiteDataInput!
}

input BookingUpsertWithWhereUniqueNestedInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateDataInput!
  create: BookingCreateInput!
}

input BookingUpsertWithWhereUniqueWithoutBookedSiteInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutBookedSiteDataInput!
  create: BookingCreateWithoutBookedSiteInput!
}

input BookingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  spots: Int
  spots_not: Int
  spots_in: [Int!]
  spots_not_in: [Int!]
  spots_lt: Int
  spots_lte: Int
  spots_gt: Int
  spots_gte: Int
  bookedSite: CampsiteWhereInput
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [BookingWhereInput!]
  OR: [BookingWhereInput!]
  NOT: [BookingWhereInput!]
}

input BookingWhereUniqueInput {
  id: ID
}

type Campsite {
  id: ID!
  campname: String!
  price: Int!
  description: String
  facilities: [String!]!
  details: [String!]!
  long: Float!
  lat: Float!
  spots: Int
  booked(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking!]
}

type CampsiteConnection {
  pageInfo: PageInfo!
  edges: [CampsiteEdge]!
  aggregate: AggregateCampsite!
}

input CampsiteCreatedetailsInput {
  set: [String!]
}

input CampsiteCreatefacilitiesInput {
  set: [String!]
}

input CampsiteCreateInput {
  id: ID
  campname: String!
  price: Int!
  description: String
  facilities: CampsiteCreatefacilitiesInput
  details: CampsiteCreatedetailsInput
  long: Float!
  lat: Float!
  spots: Int
  booked: BookingCreateManyWithoutBookedSiteInput
}

input CampsiteCreateOneInput {
  create: CampsiteCreateInput
  connect: CampsiteWhereUniqueInput
}

input CampsiteCreateOneWithoutBookedInput {
  create: CampsiteCreateWithoutBookedInput
  connect: CampsiteWhereUniqueInput
}

input CampsiteCreateWithoutBookedInput {
  id: ID
  campname: String!
  price: Int!
  description: String
  facilities: CampsiteCreatefacilitiesInput
  details: CampsiteCreatedetailsInput
  long: Float!
  lat: Float!
  spots: Int
}

type CampsiteEdge {
  node: Campsite!
  cursor: String!
}

enum CampsiteOrderByInput {
  id_ASC
  id_DESC
  campname_ASC
  campname_DESC
  price_ASC
  price_DESC
  description_ASC
  description_DESC
  long_ASC
  long_DESC
  lat_ASC
  lat_DESC
  spots_ASC
  spots_DESC
}

type CampsitePreviousValues {
  id: ID!
  campname: String!
  price: Int!
  description: String
  facilities: [String!]!
  details: [String!]!
  long: Float!
  lat: Float!
  spots: Int
}

type CampsiteSubscriptionPayload {
  mutation: MutationType!
  node: Campsite
  updatedFields: [String!]
  previousValues: CampsitePreviousValues
}

input CampsiteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CampsiteWhereInput
  AND: [CampsiteSubscriptionWhereInput!]
  OR: [CampsiteSubscriptionWhereInput!]
  NOT: [CampsiteSubscriptionWhereInput!]
}

input CampsiteUpdateDataInput {
  campname: String
  price: Int
  description: String
  facilities: CampsiteUpdatefacilitiesInput
  details: CampsiteUpdatedetailsInput
  long: Float
  lat: Float
  spots: Int
  booked: BookingUpdateManyWithoutBookedSiteInput
}

input CampsiteUpdatedetailsInput {
  set: [String!]
}

input CampsiteUpdatefacilitiesInput {
  set: [String!]
}

input CampsiteUpdateInput {
  campname: String
  price: Int
  description: String
  facilities: CampsiteUpdatefacilitiesInput
  details: CampsiteUpdatedetailsInput
  long: Float
  lat: Float
  spots: Int
  booked: BookingUpdateManyWithoutBookedSiteInput
}

input CampsiteUpdateManyMutationInput {
  campname: String
  price: Int
  description: String
  facilities: CampsiteUpdatefacilitiesInput
  details: CampsiteUpdatedetailsInput
  long: Float
  lat: Float
  spots: Int
}

input CampsiteUpdateOneRequiredInput {
  create: CampsiteCreateInput
  update: CampsiteUpdateDataInput
  upsert: CampsiteUpsertNestedInput
  connect: CampsiteWhereUniqueInput
}

input CampsiteUpdateOneRequiredWithoutBookedInput {
  create: CampsiteCreateWithoutBookedInput
  update: CampsiteUpdateWithoutBookedDataInput
  upsert: CampsiteUpsertWithoutBookedInput
  connect: CampsiteWhereUniqueInput
}

input CampsiteUpdateWithoutBookedDataInput {
  campname: String
  price: Int
  description: String
  facilities: CampsiteUpdatefacilitiesInput
  details: CampsiteUpdatedetailsInput
  long: Float
  lat: Float
  spots: Int
}

input CampsiteUpsertNestedInput {
  update: CampsiteUpdateDataInput!
  create: CampsiteCreateInput!
}

input CampsiteUpsertWithoutBookedInput {
  update: CampsiteUpdateWithoutBookedDataInput!
  create: CampsiteCreateWithoutBookedInput!
}

input CampsiteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  campname: String
  campname_not: String
  campname_in: [String!]
  campname_not_in: [String!]
  campname_lt: String
  campname_lte: String
  campname_gt: String
  campname_gte: String
  campname_contains: String
  campname_not_contains: String
  campname_starts_with: String
  campname_not_starts_with: String
  campname_ends_with: String
  campname_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  long: Float
  long_not: Float
  long_in: [Float!]
  long_not_in: [Float!]
  long_lt: Float
  long_lte: Float
  long_gt: Float
  long_gte: Float
  lat: Float
  lat_not: Float
  lat_in: [Float!]
  lat_not_in: [Float!]
  lat_lt: Float
  lat_lte: Float
  lat_gt: Float
  lat_gte: Float
  spots: Int
  spots_not: Int
  spots_in: [Int!]
  spots_not_in: [Int!]
  spots_lt: Int
  spots_lte: Int
  spots_gt: Int
  spots_gte: Int
  booked_every: BookingWhereInput
  booked_some: BookingWhereInput
  booked_none: BookingWhereInput
  AND: [CampsiteWhereInput!]
  OR: [CampsiteWhereInput!]
  NOT: [CampsiteWhereInput!]
}

input CampsiteWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createBooking(data: BookingCreateInput!): Booking!
  updateBooking(data: BookingUpdateInput!, where: BookingWhereUniqueInput!): Booking
  updateManyBookings(data: BookingUpdateManyMutationInput!, where: BookingWhereInput): BatchPayload!
  upsertBooking(where: BookingWhereUniqueInput!, create: BookingCreateInput!, update: BookingUpdateInput!): Booking!
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteManyBookings(where: BookingWhereInput): BatchPayload!
  createCampsite(data: CampsiteCreateInput!): Campsite!
  updateCampsite(data: CampsiteUpdateInput!, where: CampsiteWhereUniqueInput!): Campsite
  updateManyCampsites(data: CampsiteUpdateManyMutationInput!, where: CampsiteWhereInput): BatchPayload!
  upsertCampsite(where: CampsiteWhereUniqueInput!, create: CampsiteCreateInput!, update: CampsiteUpdateInput!): Campsite!
  deleteCampsite(where: CampsiteWhereUniqueInput!): Campsite
  deleteManyCampsites(where: CampsiteWhereInput): BatchPayload!
  createReview(data: ReviewCreateInput!): Review!
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  booking(where: BookingWhereUniqueInput!): Booking
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking]!
  bookingsConnection(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookingConnection!
  campsite(where: CampsiteWhereUniqueInput!): Campsite
  campsites(where: CampsiteWhereInput, orderBy: CampsiteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Campsite]!
  campsitesConnection(where: CampsiteWhereInput, orderBy: CampsiteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CampsiteConnection!
  review(where: ReviewWhereUniqueInput!): Review
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Review {
  id: ID!
  comment: String!
  author: User!
  site: Campsite!
}

type ReviewConnection {
  pageInfo: PageInfo!
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  id: ID
  comment: String!
  author: UserCreateOneInput!
  site: CampsiteCreateOneInput!
}

type ReviewEdge {
  node: Review!
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  comment_ASC
  comment_DESC
}

type ReviewPreviousValues {
  id: ID!
  comment: String!
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
  AND: [ReviewSubscriptionWhereInput!]
  OR: [ReviewSubscriptionWhereInput!]
  NOT: [ReviewSubscriptionWhereInput!]
}

input ReviewUpdateInput {
  comment: String
  author: UserUpdateOneRequiredInput
  site: CampsiteUpdateOneRequiredInput
}

input ReviewUpdateManyMutationInput {
  comment: String
}

input ReviewWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  author: UserWhereInput
  site: CampsiteWhereInput
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
}

input ReviewWhereUniqueInput {
  id: ID
}

type Subscription {
  booking(where: BookingSubscriptionWhereInput): BookingSubscriptionPayload
  campsite(where: CampsiteSubscriptionWhereInput): CampsiteSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  password: String!
  email: String!
  phone: Int
  emergency: Int
  booked(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking!]
  favourite: [String!]!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreatefavouriteInput {
  set: [String!]
}

input UserCreateInput {
  id: ID
  name: String!
  password: String!
  email: String!
  phone: Int
  emergency: Int
  booked: BookingCreateManyInput
  favourite: UserCreatefavouriteInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  emergency_ASC
  emergency_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  password: String!
  email: String!
  phone: Int
  emergency: Int
  favourite: [String!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  password: String
  email: String
  phone: Int
  emergency: Int
  booked: BookingUpdateManyInput
  favourite: UserUpdatefavouriteInput
}

input UserUpdatefavouriteInput {
  set: [String!]
}

input UserUpdateInput {
  name: String
  password: String
  email: String
  phone: Int
  emergency: Int
  booked: BookingUpdateManyInput
  favourite: UserUpdatefavouriteInput
}

input UserUpdateManyMutationInput {
  name: String
  password: String
  email: String
  phone: Int
  emergency: Int
  favourite: UserUpdatefavouriteInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: Int
  phone_not: Int
  phone_in: [Int!]
  phone_not_in: [Int!]
  phone_lt: Int
  phone_lte: Int
  phone_gt: Int
  phone_gte: Int
  emergency: Int
  emergency_not: Int
  emergency_in: [Int!]
  emergency_not_in: [Int!]
  emergency_lt: Int
  emergency_lte: Int
  emergency_gt: Int
  emergency_gte: Int
  booked_every: BookingWhereInput
  booked_some: BookingWhereInput
  booked_none: BookingWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    